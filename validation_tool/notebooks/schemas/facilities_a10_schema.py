from pandera import DataFrameSchema, Column, Check, Index, MultiIndex

## Validation schema for the A-10 sample data

a10_schema = DataFrameSchema(
    columns={
        "Agency": Column(
            dtype="object",
            checks=None,
            nullable=False,
            unique=False,
            coerce=False,
            required=True,
            regex=False,
            description=None,
            title=None,
        ),
        "City": Column(
            dtype="object",
            checks=None,
            nullable=False,
            unique=False,
            coerce=False,
            required=True,
            regex=False,
            description=None,
            title=None,
        ),
        "State": Column(
            dtype="object",
            checks=[Check.eq('CA')],
            nullable=False,
            unique=False,
            coerce=False,
            required=True,
            regex=False,
            description="Checking that the state is CA.",
            title="State = CA check",
        ),
        "OrganizationType": Column(
            dtype="object",
            checks=None,
            nullable=False,
            unique=False,
            coerce=False,
            required=True,
            regex=False,
            description=None,
            title=None,
        ),
        "ReporterType": Column(
            dtype="object",
            checks=None,
            nullable=False,
            unique=False,
            coerce=False,
            required=True,
            regex=False,
            description=None,
            title=None,
        ),
        "year": Column(
            dtype="int64",
            checks=[
                Check.greater_than_or_equal_to(min_value=2020.0),
                Check.less_than_or_equal_to(max_value=2021.0),
            ],
            nullable=False,
            unique=False,
            coerce=False,
            required=True,
            regex=False,
            description=None,
            title=None,
        ),
        "Mode": Column(
            dtype="object",
            checks=None,
            nullable=False,
            unique=False,
            coerce=False,
            required=True,
            regex=False,
            description=None,
            title=None,
        ),
        "TOS": Column(
            dtype="object",
            checks=None,
            nullable=False,
            unique=False,
            coerce=False,
            required=True,
            regex=False,
            description=None,
            title=None,
        ),
        "ownerships": Column(
            dtype="object",
            checks=None,
            nullable=False,
            unique=False,
            coerce=False,
            required=True,
            regex=False,
            description=None,
            title=None,
        ),
        "Under200Vehicles": Column(
            dtype="float64",
            checks=None,
            nullable=False,
            unique=False,
            coerce=False,
            required=True,
            regex=False,
            description=None,
            title=None,
        ),
        "200to300Vehicles": Column(
            dtype="float64",
            checks=None,
            nullable=False,
            unique=False,
            coerce=False,
            required=True,
            regex=False,
            description=None,
            title=None,
        ),
        "Over300Vehicles": Column(
            dtype="float64",
            checks=None,
            nullable=False,
            unique=False,
            coerce=False,
            required=True,
            regex=False,
            description=None,
            title=None,
        ),
        "HeavyMaintenanceFacilities": Column(
            dtype="float64",
            checks=None,
            nullable=False,
            unique=False,
            coerce=False,
            required=True,
            regex=False,
            description=None,
            title=None,
        ),
        "TotalFacilities": Column(
            dtype="float64",
            checks=[Check(lambda x: round(x.sum()) % 1 == 0) 
            ],
            nullable=False,
            unique=False,
            coerce=False,
            required=True,
            regex=False,
            description="whole number check",
            title="whole number check",
        ),
    },
    ### Checks at the DataFrameSchema-level
            
    checks=None,
    # [
    #     # Check whether total gen purpose facilities (all but heavy maintenance) is > 1. If so throw error. 
    #     Check(lambda x: x[['Under200Vehicles', 
    #                         '200to300Vehicles',
    #                         'Over300Vehicles']].sum(axis=1) < 1)
    #                              ],
    dtype=None,
    coerce=True,
    strict=True,
    name="all total > 0",
    ordered=False,
    unique=None,
    report_duplicates="all",
    unique_column_names=False,
    add_missing_columns=False,
    title="general facilities > 1",
    description="general facilities > 1",
)